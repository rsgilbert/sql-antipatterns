CREATE TABLE Jaywalking_Products (
	product_id SERIAL PRIMARY KEY,
    product_name VARCHAR(1000),
    account_id BIGINT UNSIGNED,
    FOREIGN KEY (account_id) REFERENCES Accounts(account_id)
);

INSERT INTO Accounts (account_id, account_name) VALUES(DEFAULT, "James");
INSERT INTO Accounts (account_id, account_name) VALUES(DEFAULT, "Milcah");
SELECT * FROM Accounts;

INSERT INTO Jaywalking_Products (product_id, product_name, account_id)
VALUES(DEFAULT, 'Visual TurboBuilder', 2);


// antipattern
CREATE TABLE Jaywalking_Products2 (
product_id SERIAL PRIMARY KEY,
product_name VARCHAR(1000),
account_id VARCHAR(100)
);
INSERT INTO Jaywalking_Products2 (product_id, product_name, account_id) 
VALUES (DEFAULT, "Camera", "23,15,20");

SELECT * FROM Jaywalking_Products2;

//updating account_id
UPDATE Jaywalking_Products2
SET account_id = CONCAT(account_id, ",", "88")
WHERE product_id = 3;


// solution
// intersection table
CREATE TABLE Contacts (
	product_id BIGINT UNSIGNED NOT NULL,
    account_id BIGINT UNSIGNED NOT NULL,
    PRIMARY KEY(product_id, account_id),
    FOREIGN KEY(product_id) REFERENCES Products(product_id),
    FOREIGN KEY(account_id) REFERENCES Accounts(account_id)
);
INSERT INTO Products VALUES(DEFAULT, "Blanket"), (DEFAULT,"Bulb"), (DEFAULT,"Radio"), (DEFAULT, "Watch");
INSERT INTO Contacts (product_id, account_id) VALUES (1, 1), (2,1);


// query for products that are mapped to a given account 
SELECT p.*, c.*
FROM Products AS p JOIN Contacts AS c 
ON (p.product_id = c.product_id)
WHERE c.account_id = 1;

// query for account details for accounts mapped to a given product
SELECT c.*, a.*
FROM Accounts AS a JOIN Contacts AS c
ON a.account_id = c.account_id
WHERE product_id = 2;


// aggregates
// no of accounts per product 
SELECT product_id, COUNT(account_id) AS no_of_accounts
FROM Contacts
GROUP BY product_id;

// no of products per account
SELECT account_id, COUNT(product_id) AS no_of_products
FROM Contacts
GROUP BY account_id;

// product with greatest no of accounts
SELECT * 
FROM Products AS p
WHERE p.product_id =
	(SELECT product_id
	FROM Contacts
	GROUP BY product_id
	ORDER BY COUNT(account_id) DESC
	LIMIT 1) ;


// remove data 
DELETE FROM Contacts 
WHERE product_id = 1 AND account_id = 1;











